#!/bin/sh

# Deployed stack
# - NestJS
# - Redis
# - Mailpit

printf "Project name: "
read -r projectName

printf "First app name: "
read -r firstAppName

# Install and configure Nx
npm i --global nx@16
npx create-nx-workspace@16 "$projectName" \
  --interactive=false \
  --workspaceType=integrated \
  --preset=apps \
  --skipGit=true \
  --pm=npm \
  --nxCloud=false

cd "$projectName" || exit 1

# Install NestJS
npm i --save-dev @nx/nest
npx nx g @nx/nest:app $firstAppName \
  --unitTestRunner jest \
  --directory apps/$firstAppName \
  --projectNameAndRootFormat as-provided \
  --strict true \
  --e2eTestRunner none

cat << EOF > apps/$firstAppName/Dockerfile
# This file is generated by Nx.
#
# Build the docker image with \`npx nx docker-build $firstAppName\`.
# Tip: Modify "docker-build" options in project.json to change docker build args.
#
# Run the container with \`docker run -p 3000:3000 -t $firstAppName\`.
FROM docker.io/node:lts-alpine

ENV HOST=0.0.0.0
ENV PORT=3000

WORKDIR /app

RUN addgroup --system $firstAppName && \
          adduser --system -G $firstAppName $firstAppName

COPY dist/apps/$firstAppName $firstAppName
RUN chown -R $firstAppName:$firstAppName .

# You can remove this install step if you build with \`--bundle\` option.
# The bundled output will include external dependencies.
RUN npm --prefix $firstAppName --omit=dev -f install


CMD [ "node", "$firstAppName/main.js" ]
EOF

cat << EOF > docker-compose.yaml
version: '3'
services:
  redis:
    image: 'redis:alpine'
    ports:
      - '\${FORWARD_REDIS_PORT:-6379}:6379'
    volumes:
      - 'nest-redis:/data'
    networks:
      - nest
    healthcheck:
      test:
        - CMD
        - redis-cli
        - ping
      retries: 3
      timeout: 5s
  mailpit:
    image: 'axllent/mailpit:latest'
    ports:
      - '\${FORWARD_MAILPIT_PORT:-1025}:1025'
      - '\${FORWARD_MAILPIT_DASHBOARD_PORT:-8025}:8025'
    networks:
      - nest

networks:
  nest:
    driver: bridge
volumes:
  nest-redis:
    driver: local

EOF


cat << EOF > .env
DB_USERNAME=nestjs
DB_PASSWORD=nestjs
DB_DATABASE=nestjs
DB_HOST=localhost
EOF

echo ".env" >> .gitignore

cp .env .env.example
mkdir -p .github/workflows
cat << EOF > .github/workflows/check.yml
name: 'Check project'

on:
  pull_request:
    branches:
      - staging
      - main

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: '\${{ github.workflow }} @ \${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  check-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
      - name: Install dependencies üì¶
        run: npm ci
      - name: Link check üóíÔ∏è
        run: npx nx run-many -t lint
      - name: Running tests üß™
        run: npx nx run-many -t test
      - name: Testing production build üèóÔ∏è
        run: npx nx run-many -t build
EOF

cat << EOF > README.md
## Prerequisites
Install the npm dependencies
\`\`\`
npm install
\`\`\`

## Development

### Directory structure
\`\`\`
‚îú‚îÄ‚îÄ apps
‚îÇ   ‚îî‚îÄ‚îÄ backend
‚îú‚îÄ‚îÄ libs
‚îÇ   ‚îú‚îÄ‚îÄ db
‚îú‚îÄ‚îÄ.env
‚îú‚îÄ‚îÄ.env.example
‚îú‚îÄ‚îÄdocker-compose.yml
‚îú‚îÄ‚îÄdist
\`\`\`
The apps directory contains the applications.

The libs directory contains the modules used by the frontend and/or the backend.

By default, there is one module: **db**.
* **db**: contains the prisma schema and the generated prisma client used by the backend.

> **Important**
> In a library, a component, to be used outside the library, must be exported in the index.ts file.

### Start the development servers
In order to start both the backend and the frontend, run the following command:
\`\`\`
nx run-many -t serve
\`\`\`

The backend will be available at http://localhost:3000/api.

In order to start the database servers, run the following command:
\`\`\`
docker compose up
\`\`\`
It will start the following servers:
* redis
  * Host: localhost
  * Port: 6379
* mailpit
  * Host: localhost
  * Port: 1025


### Linting
\`\`\`
nx run-many -t lint
\`\`\`

### Testing
\`\`\`
nx run-many -t test
\`\`\`

## Production
To build the project run:
\`\`\`
nx run-many -t build
\`\`\`
The build artifacts will be stored in the \`dist/\` directory, ready to be deployed.
 \\

 \\
<a alt="Nx logo" href="https://nx.dev" target="_blank" rel="noreferrer"><img src="https://raw.githubusercontent.com/nrwl/nx/master/images/nx-logo.png" width="45"></a>

‚ú® **This workspace has been generated by [Nx, a Smart, fast and extensible build system.](https://nx.dev)** ‚ú®


## Generate code

If you happen to use Nx plugins, you can leverage code generators that might come with it.

Run \`nx list\` to get a list of available plugins and whether they have generators. Then run \`nx list <plugin-name>\` to see what generators are available.

Learn more about [Nx generators on the docs](https://nx.dev/plugin-features/use-code-generators).

## Running tasks

To execute tasks with Nx use the following syntax:

\`\`\`
nx <target> <project> <...options>
\`\`\`

You can also run multiple targets:

\`\`\`
nx run-many -t <target1> <target2>
\`\`\`

..or add \`-p\` to filter specific projects

\`\`\`
nx run-many -t <target1> <target2> -p <proj1> <proj2>
\`\`\`

Targets can be defined in the \`package.json\` or \`projects.json\`. Learn more [in the docs](https://nx.dev/core-features/run-tasks).
EOF