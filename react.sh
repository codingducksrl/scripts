#!/bin/sh

printf "Project name: "
read -r projectName

# Install and configure Nx
npx create-nx-workspace@17 "$projectName" \
  --interactive=false \
  --workspaceType=integrated \
  --preset=apps \
  --skipGit=true \
  --pm=npm \
  --nxCloud=false

cd "$projectName" || exit 1

# Install React
npm i --save-dev @nx/react
npx nx g @nx/react:app react \
  --unitTestRunner jest \
  --strict true \
  --e2eTestRunner none \
  --bundler vite \
  --directory react \
  --globalCss true \
  --routing true \
  --style css

npx nx g @nx/react:lib ui \
  --unitTestRunner=jest \
  --bundler=vite \
  --directory libs/ui \
  --globalCss=true \
  --style=css \
  --strict true

# Configure Tailwind
npx nx g @nx/react:setup-tailwind --project=frontend
npx nx g @nx/react:setup-tailwind --project=ui

# Install Storybook
npx nx g @nx/react:storybook-configuration ui \
  --generateStories=true \
  --generateCypressSpecs=false \
  --interactionTests=false \
  --configureStaticServe=false

cat << EOF > libs/ui/.storybook/tailwind-imports.css
@tailwind base;
@tailwind components;
@tailwind utilities;
EOF

echo "import './tailwind-imports.css';" >> libs/ui/.storybook/preview.ts


cat << EOF > .env
VITE_API_URL='http://localhost:3000/api'
VITE_COMMIT_SHA='local'
EOF

echo ".env" >> .gitignore

cp .env .env.example

mkdir -p libs/ui/src/atoms
mkdir -p libs/ui/src/molecules
mkdir -p libs/ui/src/organisms
mkdir -p libs/ui/src/templates

touch libs/ui/src/atoms/.gitkeep
touch libs/ui/src/molecules/.gitkeep
touch libs/ui/src/organisms/.gitkeep
touch libs/ui/src/templates/.gitkeep

mkdir -p .github/workflows

cat << EOF > .github/workflows/check.yml
name: 'Check project'

on:
  pull_request:
    branches:
      - staging
      - main

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: '\${{ github.workflow }} @ \${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  check-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
      - name: Install dependencies üì¶
        run: npm ci
      - name: Link check üóíÔ∏è
        run: npx nx run-many -t lint
      - name: Running tests üß™
        run: npx nx run-many -t test
      - name: Testing production build üèóÔ∏è
        run: npx nx run-many -t build
EOF

cat << EOF > README.md
## Prerequisites
Install the npm dependencies
\`\`\`
npm install
\`\`\`

## Development

### Directory structure
\`\`\`
‚îú‚îÄ‚îÄ react
‚îú‚îÄ‚îÄ libs
‚îÇ   ‚îú‚îÄ‚îÄ ui
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ src
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ atoms
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ molecules
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ organisms
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ templates
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
‚îÇ   ‚îú‚îÄ‚îÄ db
‚îú‚îÄ‚îÄ.env
‚îú‚îÄ‚îÄ.env.example
‚îú‚îÄ‚îÄdocker-compose.yml
‚îú‚îÄ‚îÄdist
\`\`\`
The react directory contains the frontend application.

The libs directory contains the modules used by the frontend.

By default, there is one module: **ui**.
* **ui**: contains the components used by the frontend. It is a library of reusable components.
  It must follow the atomic design principles.

> **Important**
> In a library, a component, to be used outside the library, must be exported in the index.ts file.

### Start the development servers
In order to start both the backend and the frontend, run the following command:
\`\`\`
nx run-many -t serve
\`\`\`
If you want to start the frontend separately, you can run the following commands:
\`\`\`
nx serve frontend
\`\`\`
The frontend will be available at http://localhost:4200/,

### Start storybook
\`\`\`
nx serve ui:storybook
\`\`\`

### Linting
\`\`\`
nx run-many -t lint
\`\`\`

### Testing
\`\`\`
nx run-many -t test
\`\`\`

## Production
To build the project run:
\`\`\`
nx run-many -t build
\`\`\`
The build artifacts will be stored in the \`dist/\` directory, ready to be deployed.
 \\

 \\
<a alt="Nx logo" href="https://nx.dev" target="_blank" rel="noreferrer"><img src="https://raw.githubusercontent.com/nrwl/nx/master/images/nx-logo.png" width="45"></a>

‚ú® **This workspace has been generated by [Nx, a Smart, fast and extensible build system.](https://nx.dev)** ‚ú®


## Generate code

If you happen to use Nx plugins, you can leverage code generators that might come with it.

Run \`nx list\` to get a list of available plugins and whether they have generators. Then run \`nx list <plugin-name>\` to see what generators are available.

Learn more about [Nx generators on the docs](https://nx.dev/plugin-features/use-code-generators).

## Running tasks

To execute tasks with Nx use the following syntax:

\`\`\`
nx <target> <project> <...options>
\`\`\`

You can also run multiple targets:

\`\`\`
nx run-many -t <target1> <target2>
\`\`\`

..or add \`-p\` to filter specific projects

\`\`\`
nx run-many -t <target1> <target2> -p <proj1> <proj2>
\`\`\`

Targets can be defined in the \`package.json\` or \`projects.json\`. Learn more [in the docs](https://nx.dev/core-features/run-tasks).
EOF